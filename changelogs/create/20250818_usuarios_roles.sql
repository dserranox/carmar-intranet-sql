-- =======================
--  USUARIOS
-- =======================
CREATE TABLE IF NOT EXISTS USUARIOS (
  USR_ID BIGSERIAL PRIMARY KEY,
  USR_USERNAME VARCHAR(200) NOT NULL,
  USR_EMAIL    VARCHAR(200),
  USR_PASSWORD TEXT NOT NULL,
  USR_ACTIVO  BOOLEAN NOT NULL DEFAULT TRUE,
  USR_ULT_LOGIN TIMESTAMP,
  aud_usr_ins varchar(250) NOT NULL,
  aud_usr_upd varchar(250) NOT NULL,
  aud_fecha_ins timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  aud_fecha_upd timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- =======================
--  ROLES
-- =======================
CREATE TABLE IF NOT EXISTS ROLES (
  ROL_ID BIGSERIAL PRIMARY KEY,
  ROL_NOMBRE VARCHAR(64) NOT NULL,
  ROL_DESCRIPCION VARCHAR(255)
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_roles_nombre ON ROLES(ROL_NOMBRE);

-- =======================
--  PERMISOS
-- =======================
CREATE TABLE IF NOT EXISTS PERMISOS (
  PRM_ID BIGSERIAL PRIMARY KEY,
  PRM_CLAVE VARCHAR(128) NOT NULL,
  PRM_DESCRIPCION VARCHAR(255)
);
CREATE UNIQUE INDEX IF NOT EXISTS uq_permisos_clave ON PERMISOS(PRM_CLAVE);

-- =======================
--  USUARIOS_ROLES (N:M)
-- =======================
CREATE TABLE IF NOT EXISTS USUARIOS_ROLES (
  UR_USR_ID BIGINT NOT NULL REFERENCES USUARIOS(USR_ID) ON UPDATE CASCADE ON DELETE CASCADE,
  UR_ROL_ID BIGINT NOT NULL REFERENCES ROLES(ROL_ID) ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT PK_USUARIOS_ROLES PRIMARY KEY (UR_USR_ID,UR_ROL_ID)
);
-- Índices para joins
CREATE INDEX IF NOT EXISTS ix_ur_usr ON USUARIOS_ROLES(UR_USR_ID);
CREATE INDEX IF NOT EXISTS ix_ur_rol ON USUARIOS_ROLES(UR_ROL_ID);

-- =======================
--  ROLES_PERMISOS (N:M)
-- =======================
CREATE TABLE IF NOT EXISTS ROLES_PERMISOS (
  RP_ROL_ID BIGINT NOT NULL REFERENCES ROLES(ROL_ID) ON UPDATE CASCADE ON DELETE CASCADE,
  RP_PRM_ID BIGINT NOT NULL REFERENCES PERMISOS(PRM_ID) ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT PK_ROLES_PERMISOS PRIMARY KEY (RP_ROL_ID,RP_PRM_ID)
);
CREATE INDEX IF NOT EXISTS ix_rp_rol ON ROLES_PERMISOS(RP_ROL_ID);
CREATE INDEX IF NOT EXISTS ix_rp_prm ON ROLES_PERMISOS(RP_PRM_ID);

-- =======================
--  Vista: permisos efectivos por usuario
-- =======================
CREATE OR REPLACE VIEW VW_USUARIO_PERMISOS AS
SELECT
  u.USR_ID,
  u.USR_USERNAME,
  r.ROL_NOMBRE,
  p.PRM_CLAVE
FROM USUARIOS u
JOIN USUARIOS_ROLES ur ON ur.UR_USR_ID = u.USR_ID
JOIN ROLES r           ON r.ROL_ID     = ur.UR_ROL_ID
JOIN ROLES_PERMISOS rp ON rp.RP_ROL_ID = r.ROL_ID
JOIN PERMISOS p        ON p.PRM_ID     = rp.RP_PRM_ID;


-- =======================
--  Datos base
-- =======================

INSERT INTO ROLES (ROL_NOMBRE,ROL_DESCRIPCION) VALUES
  ('ADMIN','Acceso total al sistema'),
  ('OPERARIO','Puede crear/editar tareas'),
  ('CONSULTA','Sólo lectura')
ON CONFLICT DO NOTHING;

INSERT INTO PERMISOS (PRM_CLAVE,PRM_DESCRIPCION) VALUES
  ('ORDENES:READ','Ver órdenes'),
  ('ORDENES:WRITE','Crear/editar/eliminar órdenes'),
  ('CLIENTES:READ','Ver clientes'),
  ('CLIENTES:WRITE','Crear/editar/eliminar clientes'),
  ('PRODUCTOS:READ','Ver productos'),
  ('PRODUCTOS:WRITE','Crear/editar/eliminar productos'),
  ('USUARIOS:READ','Ver usuarios y roles'),
  ('USUARIOS:WRITE','Gestionar usuarios y roles'),
  ('TAREAS:READ','Ver tareas'),
  ('TAREAS:WRITE','Gestionar tareas')
ON CONFLICT DO NOTHING;

-- ADMIN: todos los permisos
INSERT INTO ROLES_PERMISOS (RP_ROL_ID,RP_PRM_ID)
SELECT r.ROL_ID, p.PRM_ID
FROM ROLES r CROSS JOIN PERMISOS p
WHERE r.ROL_NOMBRE = 'ADMIN'
  AND NOT EXISTS (
    SELECT 1 FROM ROLES_PERMISOS rp
    WHERE rp.RP_ROL_ID = r.ROL_ID AND rp.RP_PRM_ID = p.PRM_ID
  );

-- OPERADOR: READ ordenes + WRITE de tareas
INSERT INTO ROLES_PERMISOS (RP_ROL_ID,RP_PRM_ID)
SELECT r.ROL_ID, p.PRM_ID
FROM ROLES r
JOIN PERMISOS p
  ON p.PRM_CLAVE IN (
    'ORDENES:READ', 'TAREAS:REAS','TAREAS:WRITE'
  )
WHERE r.ROL_NOMBRE = 'OPERADOR'
  AND NOT EXISTS (
    SELECT 1 FROM ROLES_PERMISOS rp
    WHERE rp.RP_ROL_ID = r.ROL_ID AND rp.RP_PRM_ID = p.PRM_ID
  );

-- CONSULTA: sólo READ
INSERT INTO ROLES_PERMISOS (RP_ROL_ID,RP_PRM_ID)
SELECT r.ROL_ID, p.PRM_ID
FROM ROLES r
JOIN PERMISOS p ON p.PRM_CLAVE LIKE '%:READ'
WHERE r.ROL_NOMBRE = 'CONSULTA'
  AND NOT EXISTS (
    SELECT 1 FROM ROLES_PERMISOS rp
    WHERE rp.RP_ROL_ID = r.ROL_ID AND rp.RP_PRM_ID = p.PRM_ID
  );

CREATE EXTENSION pgcrypto;

-- crear admin/admin123
INSERT INTO USUARIOS (USR_USERNAME,USR_EMAIL,USR_PASSWORD,USR_ACTIVO, aud_usr_ins, aud_usr_upd)
SELECT 'admin','admin@carmar.com.ar', crypt('admin123', gen_salt('bf')), TRUE, 'auto','auto'
WHERE NOT EXISTS (SELECT 1 FROM USUARIOS WHERE USR_USERNAME = 'admin');

-- Darle rol ADMIN
INSERT INTO USUARIOS_ROLES (UR_USR_ID,UR_ROL_ID)
SELECT u.USR_ID, r.ROL_ID
FROM USUARIOS u, ROLES r
WHERE u.USR_USERNAME = 'admin' AND r.ROL_NOMBRE = 'ADMIN'
  AND NOT EXISTS (
    SELECT 1 FROM USUARIOS_ROLES ur
    WHERE ur.UR_USR_ID = u.USR_ID AND ur.UR_ROL_ID = r.ROL_ID
  );